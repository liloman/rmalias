#!/usr/bin/env bash
# rmalias - rm compatible layer for trash

set -u

#############
#  GLOBALS  #
#############

readonly software=${0##*/}
readonly version="0.1"
readonly LANG=C
readonly RM_CMD="$(which rm)"
[[ -z $RM_CMD ]] && { echo "$software: command 'rm' was not found." >&2; exit 1; }
# get path of trash.It depends on the installed version of the trash-cli package
readonly TRASH_CMD="$(which trash-put || which trash)"
[[ -z $TRASH_CMD ]] && { echo "$software: you need 'trash-put' for using this software." >&2; exit 1; }
# true to get DEBUG information
DEBUG=0

#File with sorted dirs (recursive)
readonly fileDirs="/tmp/.fileDirs" 
#STDOUT from trash-put
STDOUT=
#exit from trash-put
ERROR=0
#default exit
EXITCODE=0
#Current dir processing
CURRENT_DIR=
#Current arg processing
CURRENT_ARG=
# default option values
parents=false             
verbose=false            
force=false            
recursive=false            
doingRecursive=false
emptydirs=false            
interactive=

#For older getDirs
#Sort dirs by further and alphabetically
#  ** doesn't pass through dirs without x permission as find does :(
#shopt -s globstar 
#For checking empty dirs
shopt -s nullglob dotglob


#Sort dirs by modification time
function sortDirs() {
local tempFile="/tmp/.listing" 

rm -f $tempFile

#Fill $fileDirs with the unsorted dirs
for k in "${!dirsRecursive[@]}"; do
    #Print "time/dir"
    echo "${dirsRecursive["$k"]}/$k">>$tempFile
done

#Sort it all!
sort -t'/' -r -k1 -k2 $tempFile -o $fileDirs

rm -f $tempFile 
}


#Insert dirs in dirsRecursive by depth-traversal with modification time
function getDirs() {
local max=0 base="$1" tempFile="/tmp/.listing"  cur time
local regex='find:[[:space:]][[:punct:]](.*)[[:punct:]]: Permission denied' 
#remove trailing /
base="${base%/}"

(($DEBUG >= 2)) && echo "getDirs: base:$base"

#Get dirs ordered by modification time
find "$base/" -mindepth 1 -type d -printf '%A@/%p\n' &> $tempFile
if [[ ! -r $base  ]]; then
    > $tempFile
fi

dirsRecursive["$base"]="000000"

(($DEBUG >= 3)) && { echo "getDirs unsorted file:" ; cat $tempFile;echo "****"; }

#Dont parse error from permission denied
while IFS= read -r line; do
    [[ $line =~ $regex ]] && continue
    time=${line%%/*}
    cur="${line#*/}"
    dirsRecursive["$cur"]="$time"
done < $tempFile

#Parse error from permission denied now
while IFS= read -r line; do
    [[ ! $line =~ $regex ]] && continue
    if [[ $line =~ $regex ]]; then 
        cur="${BASH_REMATCH[1]}"
        time=${dirsRecursive["${cur%/*}"]}
        #Get parent modification time then
        time=${dirsRecursive["${cur%/*}"]}
        dirsRecursive["$cur"]="$time"
    fi
done < $tempFile


rm -f $tempFile
}

function usage() {
echo "Try '$software --help' for more information."
exit 1
}

function deletedir() {
local dir="$1" answer
(($DEBUG >= 2)) && echo "deletedir: $dir"

checkValid "$dir" "dir"
}


function checkValid() {
local dir="$1"  dontPrint=false isAfile="$2"
local base type
(($DEBUG >= 2)) && echo "CheckValid: dir:$dir isAfile=$isAfile"

(($DEBUG >= 3)) && set -x 

#Check if dir was already deleted from dirsRecursive
if [[  $doingRecursive == true  ]]; then
    [[ $isAfile = dir  && -z ${dirsRecursive["$dir"]} ]] && return
    (($DEBUG >= 2)) && echo "Dir was not deleted: --> $dir"
fi

#No way on doing it without stat, just with bash tests... :(
type=$(stat -c '%F' "$dir" 2>/dev/null)

#If it's a dir
if [[ $type = "directory" ]]; then
    #Recursive option only for dirs not parsed already
    if [[ $recursive == true && $doingRecursive == false ]]; then
        doingRecursive=true
        #Get all subdirs 
        getDirs "$dir"
        #Sort it all by modification time
        sortDirs
        #read dirs them
        while IFS= read -r line; do
            #Remove the time from line
            base=${line#*/} 
            #Remove only files of each subdir (base has a trailing /)
            for file in "$base"/*; do
                [[ ! -d $file ]] &&  checkValid "$file" "file"
            done
            #Remove subdir when all files have been checked/deleted
            checkValid "$base" "dir"
        done < $fileDirs
        (($DEBUG >= 3)) && { echo "sortDirs sorted file:" ; cat $fileDirs; }
        #Clean up for next arguments
        rm -f $fileDirs
        unset dirsRecursive
        doingRecursive=false
        #Dont delete arg base dir cause it's already included in dirsRecursive
        return
    # Not recursive or doingRecursive = true
    else
        #Permission read/write on directory or execution on parent dir for dirs
        if [[ ! -r $dir || ! -w $dir || ! -x $dir/..  ]]; then
            #It must be possible to delete any empty dir (see empty-inacc.sh test)
            [[ ! -r $dir ]] && chmod u+r $dir
             if [[ -n $(echo "$dir"/*) ]]; then
                chmod u-r $dir
                dontPrint=$force
                ERROR=1
                STDOUT="$software: cannot remove '$dir': Permission denied"$'\n'
             fi
            # directory not empty
        elif [[ $recursive == false && $emptydirs == false ]]; then  
            ERROR=1
            STDOUT="$software: cannot remove '$dir': Is a directory"
        elif [[ $recursive == false && -n $(echo "$dir"/*) ]]; then
            ERROR=1
            STDOUT="$software: cannot remove '$dir': Directory not empty" 
        fi
    fi
    #regular file  or symlink
elif [[ $type = regular*file || $type = *link ]]; then
    #Write permission on directory 
    if [[ ! -w ${dir%/*} && $interactive != never ]]; then
        ERROR=1
        STDOUT="$software: cannot remove '$dir': Permission denied"$'\n'
    fi
    #if it doesn't exist and not a broken symlink then not enough permissions...
elif [[ -z $type && $isAfile == dir ]]; then
    ERROR=1
    STDOUT="$software: cannot remove '$dir': Permission denied"$'\n'
fi


(($DEBUG >= 3)) && set +x 
[[ $ERROR == 0  && $dontPrint == false ]] && trashput "$dir" ||  showErrors "$dir" true
}


function trashput() {
local dir="$1"  msg
local cmd="$TRASH_CMD"
(($DEBUG >= 2)) && echo "trashput:$dir"

if [[ -n $interactive ]]; then
    case "$interactive" in 
        "always"|"yes"|"once") 
            if [[ -d $dir ]]; then echo -n "$software: remove directory '$dir'? "; read -n 1  answer
            elif [[ -e $dir ]]; then echo -n "$software: remove regular file '$dir'? "; read -n 1  answer
            fi
            case ${answer} in [^yY] ) return ;; esac 
         ;;esac
fi



[[ $verbose = true ]] && cmd+=" --verbose"

cmd+=" \"$dir\""

(($DEBUG >= 1)) && echo "$software: executing $cmd"


[[ -d $dir ]] && msg="removed directory: '$dir'" || msg="removed '$dir'"

STDOUT="$(eval "$cmd" 2>&1)"
[[ $? != 0 && $force == false ]] && EXITCODE=1

if [[ $ERROR != 0 && $verbose = true ]]; then 
    while IFS= read -r line; do
        [[ -n $line ]] && echo "$line"
    done <<< "$STDOUT"
fi

#Show verboses or errors
[[  $ERROR = 0 ]] && showVerbose "$msg" ||  showErrors "$dir" false
}


function showVerbose() {
[[ $verbose = false ]] && return
local msg="$1"

echo "$msg"
}

function showErrors() {
local dir="$1" len show="$2"
(($DEBUG >= 2)) && echo "showErrors dir=$dir ERROR=$ERROR,STDOUT=$STDOUT from ${FUNCNAME[1]}"

[[ $force == true && $show == false ]] && { EXITCODE=0; return ; }
#if first error
[[ $EXITCODE = 0 ]] && EXITCODE=$ERROR

#Print them all
while IFS= read -r line; do
    [[ -n $line ]] && echo "$line"
done <<< "$STDOUT"

#Recursive option
if [[ $ERROR == 1 && $doingRecursive == true ]]; then
    #Now remove it and its parents from dirsRecursive if error
    while [[ -n $dir ]]; do
            dirsRecursive["$dir"]="" 
            # unset doesn't work?
            # unset dirsRecursive["$dir"]
            (($DEBUG >= 2)) && echo "deleted:$dir from dirsRecursive"
        [[ ${dir%/*} == $dir ]] && break
        dir=${dir%/*}
    done
fi

#Reset 
STDOUT=
ERROR=0

}


# use getopt to parse parameters
if ! OPTIONS=$(getopt -n "$software" -o ivhfrRd -l "interactive::" -l "dir" -l "recursive" -l "force" -l "verbose" -l "help" -l "version" -- "$@"); then
    usage
    exit 1
fi
eval set -- "${OPTIONS}"


# parse options
while true; do
    case "$1" in
        "-i"|"--interactive")
            if [ "$1" == "--interactive" ]; then
                case "$2" in 
                    "never"|"no"|"none") interactive="never";; 
                    "once") interactive="once";; 
                    "always"|"yes") interactive="always";; 
                    "") interactive="always";; 
                    *) echo "$software: invalid argument '$2' for '--interactive'
                        Valid arguments are:
                          - 'never', 'no', 'none'
                          - 'once'
                          - 'always', 'yes'
                        Try 'rmalais --help' for more information." >&2;
                       exit 1 ;;
                esac 
                shift 2
            elif [ "$1" == "-I" ]; then
                    interactive="once"
                shift
            else
                    interactive="always"
                shift
            fi
            ;;

        "-d"|"--dir")
            emptydirs=true
            shift
            ;;

        "-f"|"--force")
            force=true
            shift
            ;;

        "-v"|"--verbose")
            [[ $DEBUG = 2 ]] && DEBUG=3
            [[ $DEBUG = 1 ]] && DEBUG=2
            [[ $DEBUG = 0 && $verbose = true ]] && DEBUG=1
            verbose=true
            shift
            ;;

        "-R"|"-r"|"--recursive")
            recursive=true
            shift
            ;;

        "-h")
            echo "$software: invalid option -- 'h'"
            usage
            ;;

        "--help")
            trash="${TRASH_CMD##*/}"
            echo "Put empty directories in trash using the '$trash' command in a way that is,
            otherwise as '$trash' itself, compatible to GNUs 'rm'.
            see $TRASH_CMD --help
            Usage: rm [OPTION]... [FILE]...
            Remove (unlink) the FILE(s).

            -f, --force           ignore nonexistent files and arguments, never prompt
            -i                    prompt before every removal
            -I                    prompt once before removing more than three files, or
            when removing recursively; less intrusive than -i,
            while still giving protection against most mistakes
                --interactive[=WHEN]  prompt according to WHEN: never, once (-I), or
                always (-i); without WHEN, prompt always
                --one-file-system  when removing a hierarchy recursively, skip any
                directory that is on a file system different from
                that of the corresponding command line argument
                --no-preserve-root  do not treat '/' specially
                --preserve-root   do not remove '/' (default)
                -r, -R, --recursive   remove directories and their contents recursively
                -d, --dir             remove empty directories
                -v, --verbose         explain what is being done
                --help     display this help and exit
                --version  output version information and exit

                By default, rm does not remove directories.  Use the --recursive (-r or -R)
                option to remove each listed directory, too, along with all of its contents.

                To remove a file whose name starts with a '-', for example '-foo',
                use one of these commands:
                rm -- -foo

                rm ./-foo

                Note that if you use rm to remove a file, it might be possible to recover
                some of its contents, given sufficient expertise and/or time.  For greater
                assurance that the contents are truly unrecoverable, consider using shred.

                Please report bugs using GitHub at <https://github.com/liloman/rmalias>.
                Besides, you will find general help and information about $software there."
            exit 0
            ;;

        "--version")
            echo "rmalias $version" 
            echo "Copyright (C) 2015 Carlos Morata"
            echo "License GPLv3: GNU GPL version 3 only <http://gnu.org/licenses/gpl.html>."
            echo "This is free software: you are free to change and redistribute it."
            echo "There is NO WARRANTY, to the extent permitted by law."
            echo
            echo "See also: <https://github.com/liloman/rmalias"
            exit 0
            ;;

        "--")
            shift
            break
            ;;
        \?)
            echo "Invalid options: -$OPTARG" >&2
            ;;

        *)
            echo "$software: execution of getopt failed" >&2
            usage
            ;;
    esac
done

# no arguments given
if [[ $# = 0 ]]; then
    echo "$software: missing operand" >&2
    usage
fi


# parse arguments
while (( $# > 0 )); do
    #Global array for sortDirs (recursive option)
    declare -A dirsRecursive
    current="$(realpath -se "$1" 2>/dev/null)" len="${#PWD}" 
    [[ ${current:0:len} == $PWD ]] && current="${current/$PWD\//}"
    if [[ -z $current ]]; then  
        EXITCODE=1; 
        STDOUT="$software: cannot remove '$1': No such file or directory";
        showErrors "$current" false
    else
        CURRENT_DIR="${current%/*}"
        CURRENT_ARG="$1"
        deletedir "$current"
    fi
    unset current CURRENT_DIR
    shift
done

(($DEBUG >= 2)) && echo "exit :$EXITCODE"

exit $EXITCODE


