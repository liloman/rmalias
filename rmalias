#!/usr/bin/env bash
# rmalias - rm compatible layer for trash


#############
#  GLOBALS  #
#############

readonly software=${0##*/}
readonly version="0.1"
readonly LC_ALL=C
readonly RM_CMD="$(which rm)"
[[ -z $RM_CMD ]] && { echo "$software: command 'rm' was not found." >&2; exit 1; }
# get path of trash.It depends on the installed version of the trash-cli package
readonly TRASH_CMD="$(which trash-put || which trash)"
[[ -z $TRASH_CMD ]] && { echo "$software: you need 'trash-put' for using this software." >&2; exit 1; }
# true to get DEBUG information
readonly DEBUG=false

#STDOUT from trash-put
STDOUT=
#exit from trash-put
ERROR=0
#default exit
EXITCODE=0
#Current arg processing
CURRENT_ARG=
# default option values
parents=false             
verbose=false            
force=false            
recursive=false            
emptydirs=false            

usage() {
echo "Try '$software --help' for more information."
exit 1
}

deletedir() {
local dir="$1"
[[ -z $dir ]] && { EXITCODE=1; return;}
[[ $DEBUG = true ]] && echo "deletedir: $dir"
checkValid "$dir"
}


checkValid() {
local dir="$1"
local jump=false
[[ $DEBUG = true ]] && echo "CheckValid: dir:$dir"

# No such file or directory
if [[ $force == false && ! -e $dir ]]; then  
    ERROR=1
    STDOUT="$software: failed to remove '$dir': No such file or directory"
elif [[ $force == true && ! -e $dir ]]; then  
    jump=true
# not a file
elif [[ -d $dir && $recursive == false && $emptydirs == false ]]; then  
        ERROR=1
        STDOUT="$software: cannot remove '$dir': Is a directory"
#not empty
elif [[ $recursive == false && -n $(shopt -s nullglob dotglob;echo "$dir"/*) ]]; then
    ERROR=1
    local msg="directory "
    [[ $CURRENT_ARG = $dir ]] && msg=
    STDOUT="$software: cannot remove $msg'$dir': Directory not empty" 
#Permission on parent directory!
# elif [[ ! -w $dir/.. ]]; then
#     ERROR=1
#     STDOUT="$software: failed to remove directory '$dir': Permission denied"
    # directory not empty
fi


[[ $jump == false && $ERROR = 0 ]] && trashput "$dir" ||  showErrors 
}


trashput() {
# Uncomment for coreutils > 8.13 (Ubuntu > Precise)
# local dir="$(realpath -Pe --relative-base="$PWD" "$1")" 
# realpath relative-base in bash
local dir="$(realpath "$1")" len="${#PWD}"
[[ ${dir:0:len} == $PWD ]] && dir="${dir/$PWD\//}"
#end realpath --relative-base

local cmd="$TRASH_CMD"

[[ $verbose = true ]] && cmd+=" --verbose"

cmd+=" \"$dir\""

[[ $verbose = true || $DEBUG = true ]] && echo "$software: executing $cmd"

STDOUT="$(eval "$cmd" 2>&1)"
[[ $? != 0 ]] && EXITCODE=1

if [[ $ERROR != 0 && $verbose = true ]]; then 
    while IFS= read -r line; do
        [[ -n $line ]] && echo "$line"
    done <<< "$STDOUT"
fi

#Show ERROR
[[  $ERROR = 0 ]] && checkOptions "$dir" ||  showErrors
}


checkOptions() {
local dir="$1"

[[ $DEBUG = true ]] && echo "checkOptions: $dir"

if [[ $parents = true ]]; then
    parentDir=${dir%/*}
    [[ $parentDir != $dir ]] && { 
    deletedir "$parentDir"; 
    [[ $DEBUG = true ]] && echo "deleting parent:$parentDir de:$dir"; }
fi
}


showErrors() {
[[ $DEBUG = true ]] && echo "showErrors ERROR=$ERROR,STDOUT=$STDOUT from ${FUNCNAME[1]}"

if [[ $EXITCODE = 0 ]]; then
    EXITCODE=$ERROR
fi

while IFS= read -r line; do
    [[ -n $line ]] && echo "$line"
done <<< "$STDOUT"

STDOUT=
ERROR=0
}


# use getopt to parse parameters
if ! OPTIONS=$(getopt -n "$software" -o vhfrRd -l "--dir" -l "recursive" -l "force" -l "verbose" -l "help" -l "version" -- "$@"); then
    usage
    exit 1
fi
eval set -- "${OPTIONS}"


# parse options
while true; do
    case "$1" in

        "-d"|"--dir")
            emptydirs=true
            shift
            ;;

        "-f"|"--force")
            force=true
            shift
            ;;

        "-v"|"--verbose")
            verbose=true
            shift
            ;;

        "-R"|"-r"|"--recursive")
            recursive=true
            shift
            ;;

        "-h")
            echo "$software: invalid option -- 'h'"
            usage
            ;;

        "--help")
            trash="${TRASH_CMD##*/}"

            echo "Put empty directories in trash using the '$trash' command in a way that is,"
            echo "otherwise as '$trash' itself, compatible to GNUs 'rm'."
            echo "  see $RM_CMD --help"
            echo "  see $TRASH_CMD --help"
            echo
            echo "Help options:"
            echo "      --help                display this help and exit"
            echo "      --version             output version information and exit"
            echo
            echo "Application options:"
            echo "      --ignore-fail-on-non-empty"
            echo "                 ignore each failure that is solely because a directory"
            echo "                    is non-empty"
            echo "  -p, --parents  remove DIRECTORY and its ancestors;"
            echo "                    e.g., '$software -p a/b/c' is similar"
            echo "                    to '$software a/b/c a/b a'"
            echo "  -v, --verbose  output a diagnostic for every directory processed"
            echo
            echo "Please report bugs using GitHub at <https://github.com/liloman/rmalias>."
            echo "Besides, you will find general help and information about $software there."
            exit 0
            ;;

        "--version")
            echo "rmalias $version" 
            echo "Copyright (C) 2015 Carlos Morata"
            echo "License GPLv3: GNU GPL version 3 only <http://gnu.org/licenses/gpl.html>."
            echo "This is free software: you are free to change and redistribute it."
            echo "There is NO WARRANTY, to the extent permitted by law."
            echo
            echo "See also: <https://github.com/liloman/rmalias"
            exit 0
            ;;

        "--")
            shift
            break
            ;;
        \?)
            echo "Invalid options: -$OPTARG" >&2
            ;;

        *)
            echo "$software: execution of getopt failed" >&2
            usage
            ;;
    esac
done

# no arguments given
if [[ $# = 0 ]]; then
    echo "$software: missing operand" >&2
    usage
fi


# parse arguments
while (( $# > 0 )); do
    CURRENT_ARG="$1"
    deletedir "$1"
    shift
done

exit $EXITCODE


